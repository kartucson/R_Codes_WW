head(phy_all[1])
head(phy_all_b[1])
phy_all <- phy_all_b
for(i in 1:nrow(phy_all))
{
if(phy_all$P_ID[i]==101 || phy_all$P_ID[i]==102 || phy_all$P_ID[i]==103 || phy_all$P_ID[i]==104 )
{
#phy_all$Timestamp <- phy_all$Timestamp - 30*60*7/100
phy_all$Timestamp <- phy_all$Timestamp - 1000
}
}
head(phy_all_b[1])
head(phy_all[1])
phy_all <- phy_all_b
for(i in 1:nrow(phy_all))
{
if(phy_all$P_ID[i]==101 || phy_all$P_ID[i]==102 || phy_all$P_ID[i]==103 || phy_all$P_ID[i]==104 )
{
#phy_all$Timestamp <- phy_all$Timestamp - 30*60*7/100
phy_all$Timestamp <- phy_all$Timestamp - 10
}
}
head(phy_all[1])
head(phy_all_b[1])
phy_all_b[1][1]-phy_all[1][1]
phy_all_b[1,1]-phy_all[1,1]
7*600/31.66667
30*60*7/100
phy_all <- phy_all_b
for(i in 1:nrow(phy_all))
{
if(phy_all$P_ID[i]==101 || phy_all$P_ID[i]==102 || phy_all$P_ID[i]==103 || phy_all$P_ID[i]==104 )
{
#phy_all$Timestamp <- phy_all$Timestamp - 30*60*7/100
phy_all$Timestamp <- phy_all$Timestamp - 132.6316 ## Magic number for converting digits to timestamp for this type of data (??!)
}
}
head(phy_all_b[1])
head(phy_all[1])
write.csv(phy_all,'C:\\Users\\karthik\\Google Drive\\INSITE Shared Folder\\GSA IEQ\\Data\\min_data\\Phy_1min.csv')
phy_all
phy_5min <- read.xlsx("C:\\Users\\karthik\\Google Drive\\INSITE Shared Folder\\GSA IEQ\\Data\\min_data\\Phy_1min_manual_coding_room.xlsx",1)
phy_b <- data_5min
phy_1 <- data_5min
phy_1$P_ID<-as.factor(phy_1$P_ID)
phy_1 <- phy_5min
phy_1$P_ID<-as.factor(phy_1$P_ID)
phy_part <- split(phy_1,phy_1$P_ID)
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.locf(data_o)
return(data_out)
}
phy_part_sec <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
}
d <- phy_part_min[[3]]
d <- phy_part_sec[[3]]
x <- zoo(d)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60, mean)
warnings()
y
head(d)
x
x[1:100]
x[1:10]
head(d)
time(x)
tt <- seq(10, 2000, 10)
tt
x <- zoo(tt, structure(tt, class = c("POSIXt", "POSIXct")))
x
structure(tt, class = c("POSIXt", "POSIXct"))
tt
x
time(x) - as.numeric(time(x)) %% 600
aggregate(x, time(x) - as.numeric(time(x)) %% 600, mean)
time(x) - as.numeric(time(x)) %% 600
as.numeric(time(x) - as.numeric(time(x)) %% 600)
time(x)
x
structure(tt, class = c("POSIXt", "POSIXct"))
time(x)
d <- phy_part_sec[[3]]
x <- zoo(d)
x
head(x)
x <- zoo(d)
y <- aggregate(x,time(x$Timestamp) - as.numeric(time(x$Timestamp)) %% 60, mean)
warnings(0)
warnings()
tt <- seq(10, 2000, 10)
x <- zoo(tt, structure(tt, class = c("POSIXt", "POSIXct")))
class(x)
d <- phy_part_sec[[3]]
x <- zoo(d,d$Timestamp)
time(x)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60, mean)
warnings()
y
time(x) - as.numeric(time(x)) %% 60
time(x)
str(d)
str(phy_1)
s<-phy_part[[1]]
str(s)
f<- phy_part_sec[[4]]
str(f)
f<- as.data.frame(phy_part_sec[[4]])
str(f)
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_ou <- na.locf(data_o)
data_out <- type.convert(data_ou)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.locf(data_o)
for (i in ncol(data_ou)) data_out[,i] <- type.convert(data_out[,i])
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.locf(data_o)
for (i in ncol(data_out)) data_out[,i] <- type.convert(data_out[,i])
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
d <- phy_part_sec[[3]]
str(d)
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.locf(data_o)
for (i in ncol(data_out))   { data_out[i] <- type.convert(data_out[i]) }
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.locf(data_o)
for (i in ncol(data_out))   { data_out[[i]] <- type.convert(data_out[[i]]) }
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
d <- phy_part_sec[[3]]
str(d)
e<-phy_part[[1]]
f<-TimeExpand(e,TimeVar='Timestamp')
str(f)
a<- na.locf(f)
a
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.locf(data_o)
#for (i in ncol(data_out))   { data_out[[i]] <- type.convert(data_out[[i]]) }
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- as.data.frame(to_sec(phy_part[[i]]))
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
phy_part[[1]]
phy_part[1]
phy_part[2]
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(as.data.frame(phy_part[[i]]))
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
### Use zoo objects to aggregate to per minute from per second (instead of custom aggregate_function)
d <- phy_part_sec[[3]]
str(d)
d <- phy_part_sec[[3]]
str(d)
d <- phy_part_sec[[1]]
str(d)
d <- as.data.frame(phy_part_sec[[1]])
str(d)
e<-phy_part[[3]]
f<- to_sec(e)
str(f)
str(e)
f<-TimeExpand(e,TimeVar='Timestamp')
str(f)
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.omit(data_o)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(as.data.frame(phy_part[[i]]))
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
### Use zoo objects to aggregate to per minute from per second (instead of custom aggregate_function)
d <- phy_part_sec[[3]]
str(d)
x <- zoo(d,d$Timestamp)
time(x)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60, mean)
y
time(x)
as.numeric(time(x)
)
time(x) - as.numeric(time(x)) %% 60
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 600, mean)
x <- zoo(d,d$Timestamp)
time(x)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 600, mean)
time(x) - as.numeric(time(x)) %% 600
time(x)
d
head(t)
head(d)
phy_part[[1]]
head(phy_part[[1]])
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
#data_out <- na.omit(data_o)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
to_sec <- function(data_in){
data_out <- TimeExpand(data_in,TimeVar='Timestamp')
#data_out <- na.omit(data_o)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
### Use zoo objects to aggregate to per minute from per second (instead of custom aggregate_function)
d <- phy_part_sec[[3]]
head(d)
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_out <- na.locf(data_o)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
temp <- zoo(phy_part[[i]],phy_part[[i]]$Timestamp)
phy_part_sec[[i]] <- to_sec(temp)
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
data_ou <- zoo(data_o,data_o$Timestamp)
data_out <- na.locf(data_ou)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
d <- phy_part_sec[[3]]
time(d)
x <- d
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 600, mean)
warnings(y)
str(d)
g<-phy_part[[1]]
str(g)
h <- TimeExpand(g,TimeVar='Timestamp')
length(h)
h[,2:21] <-na.locf(h[,2:21])
h[,22:23] <-na.locf(h[,22:23])
str(h)
h <- TimeExpand(g,TimeVar='Timestamp')
h[,!colnames(h)%in% c("Timestamp","Room","P_ID")] <-na.locf(h[,!colnames(h)%in% c("Timestamp","Room","P_ID")])
h[,colnames(h)%in% c("Room","P_ID")] <-na.locf(h[,colnames(h)%in% c("Room","P_ID")])
to_sec <- function(data_in){
data_o <- TimeExpand(data_in,TimeVar='Timestamp')
h <- data_o
h[,!colnames(h)%in% c("Timestamp","Room","P_ID")] <-na.locf(h[,!colnames(h)%in% c("Timestamp","Room","P_ID")])
h[,colnames(h)%in% c("Room","P_ID")] <-na.locf(h[,colnames(h)%in% c("Room","P_ID")])
h$P_ID<-as.factor(h$P_ID)
h$Room<-as.factor(h$Room)
data_out <- h
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
#phy_part_min[[i]]
#temp <- zoo(phy_part_sec[[i]]
}
d <- phy_part_sec[[3]]
str(d)
x <- zoo(d,d$Timestamp)
time(d)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 600, mean)
x <- zoo(d,d$Timestamp)
str(d)
str(x)
x <- zoo(d[3],d$Timestamp)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 600, mean)
y
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60, mean)
y
x <- zoo(d[23],d$Timestamp)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60, mean)
warnings(y)
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60, mode)
y
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60,factor(x))
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60,max(x))
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60,mean(x))
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60,median(x))
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60,as.factor(x))
y <- aggregate(x,time(x) - as.numeric(time(x)) %% 60,function(x) names(which.max(table(x))))
y
str(d)
time(d)
to_min <- function(data_in){
h <- data_in
data_num <- zoo(h[,!colnames(h)%in% c("Timestamp","Room","P_ID")],h$Timestamp)
data_chr <- zoo(h[,colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_out_num <- aggregate(data_num,time(data_num) - as.numeric(time(data_num)) %% 60, mean)
data_out_chr <- aggregate(data_chr, time(data_chr) - as.numeric(time(data_chr)) %% 60, function(x) names(which.max(table(x))))
data_out <- merge(data_out_num,data_chr, by = "Timestamp")
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
phy_part_min[[i]] <- to_min(phy_part_sec[[i]])
}
to_min <- function(data_in){
h <- data_in
data_num <- zoo(h[,!colnames(h)%in% c("Timestamp","Room","P_ID")],h$Timestamp)
data_chr <- zoo(h[,colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_out_num <- aggregate(data_num,time(data_num) - as.numeric(time(data_num)) %% 60, mean)
data_out_chr <- aggregate(data_chr, time(data_chr) - as.numeric(time(data_chr)) %% 60, function(x) names(which.max(table(x))))
data_out <- cbind(data_out_num,data_chr)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
phy_part_min[[i]] <- to_min(phy_part_sec[[i]])
}
g<- phy_part_min[[1]]
head(g)
g
head(d)
to_min <- function(data_in){
h <- data_in
data_num <- zoo(h[,!colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_chr <- zoo(h[,colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_out_num <- aggregate(data_num,time(data_num) - as.numeric(time(data_num)) %% 60, mean)
data_out_chr <- aggregate(data_chr, time(data_chr) - as.numeric(time(data_chr)) %% 60, function(x) names(which.max(table(x))))
data_out <- cbind(data_out_num,data_out_chr)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
phy_part_min[[i]] <- to_min(phy_part_sec[[i]])
}
g<- data_part_min[[3]]
g<- phy_part_min[[3]]
head(g)
head(d)
to_min <- function(data_in){
h <- data_in
data_num <- zoo(h[,!colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_chr <- zoo(h[,colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_out_num <- aggregate(data_num,time(data_num) - as.numeric(time(data_num)) %% 60, mean)
data_out_chr <- aggregate(data_chr, time(data_chr) - as.numeric(time(data_chr)) %% 60, function(x) names(which.max(table(x))))
data_out <- data.frame(data_out_num,data_out_chr)
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
phy_part_min[[i]] <- to_min(phy_part_sec[[i]])
}
warnings()
h <- d
data_num <- zoo(h[,!colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_num <- zoo(h[,!colnames(h)%in% c("Room","P_ID","Timestamp")],h$Timestamp)
head(data_num)
data_chr <- zoo(h[,colnames(h)%in% c("Room","P_ID")],h$Timestamp)
head(data_chr)
data_out_num <- aggregate(data_num,time(data_num) - as.numeric(time(data_num)) %% 60, mean)
head(data_out_num)
data_out_chr <- aggregate(data_chr, time(data_chr) - as.numeric(time(data_chr)) %% 60, function(x) names(which.max(table(x))))
head(data_out_chr)
head(data_chr)
data_out <- cbind(data_out_num,data_out_chr)
head(data_out)
head(data_chr)
head(data_out_chr)
head(data_out_num)
a<-as.data.frame(head(data_out_num))
b<-as.data.frame(head(data_out_chr))
c<- cbind(a,b)
c
to_min <- function(data_in){
h <- data_in
data_num <- zoo(h[,!colnames(h)%in% c("Room","P_ID","Timestamp")],h$Timestamp)
data_chr <- zoo(h[,colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_out_num <- aggregate(data_num,time(data_num) - as.numeric(time(data_num)) %% 60, mean)
data_out_chr <- aggregate(data_chr, time(data_chr) - as.numeric(time(data_chr)) %% 60, function(x) names(which.max(table(x))))
data_out <- cbind(as.dataframe(data_out_num),as.data.frame(data_out_chr))
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
phy_part_min[[i]] <- to_min(phy_part_sec[[i]])
}
to_min <- function(data_in){
h <- data_in
data_num <- zoo(h[,!colnames(h)%in% c("Room","P_ID","Timestamp")],h$Timestamp)
data_chr <- zoo(h[,colnames(h)%in% c("Room","P_ID")],h$Timestamp)
data_out_num <- aggregate(data_num,time(data_num) - as.numeric(time(data_num)) %% 60, mean)
data_out_chr <- aggregate(data_chr, time(data_chr) - as.numeric(time(data_chr)) %% 60, function(x) names(which.max(table(x))))
data_out <- cbind(as.data.frame(data_out_num),as.data.frame(data_out_chr))
return(data_out)
}
phy_part_sec <- list()
phy_part_min <- list()
for(i in 1:length(phy_part))
{
phy_part_sec[[i]] <- to_sec(phy_part[[i]])
phy_part_min[[i]] <- to_min(phy_part_sec[[i]])
}
g<- phy_part_min[[3]]
head(g)
fix(g)
